{"version":3,"sources":["viewmodel.js"],"names":["toggleBounce","this","getAnimation","setAnimation","google","maps","Animation","BOUNCE","toggleOff","largeInfowindow","map","bounds","marker","markers","searchLocations","title","wikiTitle","position","locations","location","lat","lng","Place","data","animation","imageRegExp","linkRegExp","MVM","self","locationsList","ko","observableArray","wikiURL","observable","contentString","forEach","push","input","filter","ul","li","a","i","document","getElementById","value","toUpperCase","getElementsByTagName","length","innerHTML","indexOf","style","display","listListener","open","console","log","close","event","trigger","DROP","hoverListener","hoverOut","wikiAjax","url","infowindow","$","ajax","dataType","type","headers","Api-User-Agent","crossDomain","error","jqXHR","textStatus","errorThrown","alert","html","status","responseText","success","setContent","info","code","docref","rootQuery","parse","rootContent","text","infoTitle","imgFormat","replace","formattedContent","applyBindings"],"mappings":"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","file":"main.min.js","sourcesContent":["/* eslint-disable no-unused-vars,no-undef,require-jsdoc,no-alert, no-negated-condition */\n/*\n ----- MAP VARIABLES -----\n */\nvar largeInfowindow;\nvar map;\nvar bounds;\nvar marker;\nvar markers = [];\n/*\n ----- LOCAL VARIABLES -----\n */\nvar searchLocations;\nvar title;\nvar wikiTitle;\nvar position;\nvar locations = [\n  {\n    wikiTitle: 'Taj_ahal',\n    title: 'Taj Mahal',\n    location: {lat: 27.175015, lng: 78.042155}\n  },\n  {\n    wikiTitle: 'uluru',\n    title: 'Uluru',\n    location: {lat: -25.363, lng: 131.044}\n  },\n  {\n    wikiTitle: 'Christ_the_Redeemer_(statue)',\n    title: 'The Christ the Redeemer statue',\n    location: {lat: -22.951944, lng: -43.210556}\n  },\n  {\n    wikiTitle: 'Great_Pyramid_of_Giza',\n    title: 'Great Pyramid of Giza',\n    location: {lat: 29.979175, lng: 31.134358}\n  },\n  {\n    wikiTitle: 'Great_Wall_of_China',\n    title: 'Great Wall of China',\n    location: {lat: 40.68, lng: 117.23}\n  },\n  {\n    wikiTitle: 'Petra',\n    title: 'Petra',\n    location: {lat: 30.328611, lng: 35.441944}\n  },\n  {\n    wikiTitle: 'Colosseum',\n    title: 'Colosseum',\n    location: {lat: 41.890169, lng: 12.492269}\n  },\n  {\n    wikiTitle: 'Chichen_Itza',\n    title: 'Chichen Itza',\n    location: {lat: 20.683056, lng: -88.568611}\n  },\n  {\n    wikiTitle: 'Machu_Picchu',\n    title: 'Machu Picchu',\n    location: {lat: -13.163333, lng: -72.545556}\n  }\n];\n\n// Define what data a location has.\n// A template for locations.\nvar Place = function(data) {\n  this.title = data.title;\n  this.location = data.position;\n  this.wikiTitle = data.wikiTitle;\n  this.marker = data.marker;\n  this.animation = data.animation;\n};\n/*\n ----- REGULAR EXPRESSIONS -----\n */\n// RegExp to make sure links redirect properly\n// Note: The coordinates link are getting messed up.(nothing breaks though)\nvar imageRegExp = /\\/\\//g;\nvar linkRegExp = /href=\"/g;\n\n/*\n ----- VIEW MODEL -----\n This is the main viewmodel,\n It contains the search functionality.\n It also contains the listeners needed for animations.\n */\nvar MVM;\nMVM = function() {\n  var self = this;\n  // Google Maps need this empty array\n  this.locationsList = ko.observableArray([]);\n  // wikiURL is used to make a dynamic string.\n  // The string is is a parameter from populateInfoWindow(),\n  // The url is the current markers title, the function is located in map.js.\n  self.wikiURL = ko.observable();\n  // Observable for use with ajax content,\n  // it will go through the regexp variables.\n  self.contentString = ko.observable('');\n\n  // Make each location with the Place template.\n  locations.forEach(function(location) {\n    self.locationsList.push(new Place(location));\n  });\n\n  searchLocations = function() {\n    // Declare variables\n    var input;\n    var filter;\n    var ul;\n    var li;\n    var a;\n    var i;\n    input = document.getElementById('myInput');\n    filter = input.value.toUpperCase();\n    ul = document.getElementById('myUL');\n    li = ul.getElementsByTagName('li');\n\n    // Loop through all list items, and hide those who don't match the search query\n    for (i = 0; i < li.length; i++) {\n      a = li[i].getElementsByTagName('a')[0];\n      if (a.innerHTML.toUpperCase().indexOf(filter) > -1) {\n        li[i].style.display = '';\n      } else {\n        li[i].style.display = 'none';\n      }\n    }\n  };\n  /*\n   ----- LISTENERS -----\n   */\n  self.listListener = function(location) {\n    // Sketchily close the previous InfoWindow object.\n    // This doesn't happen. :(\n    if (largeInfowindow.open() === true) {\n      console.log('largeInfoWindow open, closing it to make new content.');\n      largeInfowindow.close();\n    } else {\n      // Trigger the markers click listener.\n      google.maps.event.trigger(location.marker, 'click');\n      // Drop the marker at the location.\n      location.marker.setAnimation(google.maps.Animation.DROP);\n    }\n  };\n  self.hoverListener = function(location) {\n    // Trigger the markers mouseover listener.\n    google.maps.event.trigger(location.marker, 'mouseover');\n    // Bounce the marker at the location.\n    location.marker.setAnimation(google.maps.Animation.BOUNCE);\n  };\n  self.hoverOut = function(location) {\n    // Trigger the markers mouseout listener.\n    google.maps.event.trigger(location.marker, 'mouseout');\n    // Cancel the animation.\n    location.marker.setAnimation(null);\n  };\n};\n\n// Make a GET request to Wikipedia.\n// url is the current markers title.\nwikiAjax = function(url, infowindow) {\n  // Generate a url based on the markers title.\n  MVM.wikiURL = 'https://en.wikipedia.org/w/api.php?action=parse&prop=info%7Ctext&page=' + url + '&utf8=&format=json&formatversion=2&mobileformat=1';\n\n  $.ajax({\n    url: MVM.wikiURL,\n    dataType: 'jsonp',\n    type: 'GET',\n    headers: {'Api-User-Agent': 'allmynameswastaken@gmail.com'},\n    crossDomain: true,\n    error: function(jqXHR, textStatus, errorThrown) {\n      alert('An error occurred... Look at the console ' +\n        '(F12 or Ctrl+Shift+I, Console tab)' +\n        ' for more information!');\n      $('#result').html(\n        '<p>status code: ' +\n        jqXHR.status +\n        '</p><p>errorThrown: ' +\n        errorThrown +\n        '</p><p>jqXHR.responseText:</p><div>' +\n        jqXHR.responseText +\n        '</div>'\n      );\n      console.log('jqXHR:');\n      console.log(jqXHR);\n      console.log('textStatus:');\n      console.log(textStatus);\n      console.log('errorThrown:');\n      console.log(errorThrown);\n    },\n    // data is a jsonp object with a predictable array, starting with parse.\n    success: function(data) {\n      // Check if the response contains an error.\n      console.log(data);\n      if (data.error) {\n        // If an error is present, warn the user.\n        infowindow.setContent(\n          '<h2>The request contains an error.</h2>' +\n          '<h3>' +\n          'Error info: ' +\n           data.error.info +\n          '<br>' +\n          'Error code: ' +\n           data.error.code +\n          '<br>' +\n          '</h3>' +\n          '<h5>' +\n          'Try again & make sure the URL is correct. ' +\n          'It should match a \"en.wikipedia.com\" url.</h5>' +\n           data.error.docref\n        );\n      } else {\n        // The root of the object.\n        var rootQuery = data.parse;\n        // Content og the object\n        var rootContent = rootQuery.text;\n        // Define the title of the wiki-page.\n        var infoTitle = rootQuery.title;\n        // Go through the text of the wiki-page and replace all links.\n        var imgFormat = rootContent.replace(imageRegExp, 'https://');\n        // Go through the text of the wiki-page and replace all image references.\n        var formattedContent = imgFormat.replace(linkRegExp, 'href=\"https://en.wikipedia.org');\n\n        // Take the formatted strings and display the wiki-page's title and the text.\n        formattedContent =\n          '<h1>This is ' + infoTitle + '</h1>' + formattedContent;\n        // Assign the formatted content to the content observable.\n        MVM.contentString = formattedContent;\n        if (MVM.contentString === '') {\n          infowindow.setContent(\n            '<h3>An error occurred, ' +\n            'try again & make sure the URL is correct.' +\n            ' The URL should match a \"en.wikipedia.com\" url.</h3>'\n          );\n        } else {\n          infowindow.setContent(MVM.contentString);\n        }\n      }\n    }\n  });\n};\n/*\n ----- ANIMATION TOGGLES -----\n */\n\n// Toggles the markers bounce animation\nfunction toggleBounce() {\n  'use strict';\n  // Check if current marker is animating.\n  if (this.getAnimation() !== null) {\n    this.setAnimation(null);\n  } else {\n    // If not, make it bounce!\n    this.setAnimation(google.maps.Animation.BOUNCE);\n  }\n}\nfunction toggleOff() {\n  'use strict';\n  // Cancel the current animation. :(\n  return this.setAnimation(null);\n}\n\nMVM = new MVM();\nko.applyBindings(MVM);\n"]}